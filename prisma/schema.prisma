datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// The User model represents an individual user in the application.
// It contains common user information such as name, email, and avatar.
model User {
  id              Int              @id @default(autoincrement()) // The unique ID of the user.
  email           String           @unique // The email address of the user, which must be unique across all users.
  name            String? // The name of the user (optional).
  avatarUrl       String? // The URL of the user's avatar image (optional).
  authentications Authentication[] // A list of Authentication records associated with the user.
  memberships     Membership[] // This field represents the clubs to which the user belongs
  managers        Manager[] // This field represents the clubs that the user manages
}

// The Authentication model represents an authentication method for a user.
// It can store authentication-specific information for different providers
// (e.g., M365 OIDC, email/password, and other OAuth options).
model Authentication {
  id             Int     @id @default(autoincrement()) // The unique ID of the authentication record.
  provider       String // The authentication provider, e.g., "m365", "email", "google", "facebook".
  providerUserId String // The unique user ID from the authentication provider, such as OIDC ID.
  providerData   String? // Additional provider-specific data as a JSON string, if necessary (optional).
  passwordHash   String? // The hashed password for email/password authentication (optional).
  userId         Int // The ID of the User associated with this authentication record.
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade) // The related User record.

  @@unique([provider, providerUserId])
  @@index([provider, providerUserId])
}

model Club {
  id              Int              @id @default(autoincrement()) // The unique ID of the club.
  name            String // The name of the club.
  description     String? // A brief description of the club (optional).
  logoUrl         String? // The URL of the club's logo image (optional).
  status          ClubStatus       @default(PRIVATE) // The status of the club.
  managers        Manager[] // A list of managers associated with the club.
  membershipTypes MembershipType[] // A list of membership types associated with the club.
}

enum ClubStatus {
  PUBLIC
  HIDDEN
  PRIVATE
}

// The manager model represents a user entity that has been granted
// specific permissions to manage a club.
model Manager {
  id            Int     @id @default(autoincrement()) // The unique ID of the manager record.
  userId        Int // The ID of the User associated with this manager record.
  clubId        Int // The ID of the Club associated with this manager record.
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade) // The related User record.
  club          Club    @relation(fields: [clubId], references: [id], onDelete: Cascade) // The related Club record.
  manageClub    Boolean // Whether the manager can manage the club.
  manageMembers Boolean // Whether the manager can manage the club's members.
  createMembers Boolean // Whether the manager can create new members.
}

// The MembershipType model represents a type of membership that can be
// created for a club.
model MembershipType {
  id          Int          @id @default(autoincrement()) // The unique ID of the membership type.
  clubId      Int // The ID of the Club associated with this membership type.
  name        String // The name of the membership type.
  club        Club         @relation(fields: [clubId], references: [id], onDelete: Cascade) // The related Club record.
  memberships Membership[] // A list of memberships associated with the membership type.
  price       Float? // The price of the membership type (optional).
  duration    Int? // The duration of the membership type in months (optional).
  isAnnual    Boolean // Whether the membership type is annual (over a calendar year).
}

// The Membership model represents a user's membership in a club.
model Membership {
  id               Int            @id @default(autoincrement()) // The unique ID of the membership record.
  userId           Int // The ID of the User associated with this membership.
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade) // The related User record.
  membershipType   MembershipType @relation(fields: [membershipTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  membershipTypeId Int // The ID of the MembershipType associated with this membership.
}
