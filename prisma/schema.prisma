datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "./generated/docs"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./generated/erd.svg"
}

generator erdpdf {
  provider = "prisma-erd-generator"
  output   = "./generated/erd.pdf"
}

generator zod {
  provider = "zod-prisma"
  output   = "./generated/zod"
}

enum ProviderType {
  OIDC
  OAUTH2
}

enum Pronouns {
  HE_HIM
  SHE_HER
  THEY_THEM
  OTHER
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email           String               @unique
  preferredName   String?
  firstName       String
  lastName        String
  pronouns        Pronouns?
  otherPronouns   String?
  avatarUrl       String?
  superuser       Boolean              @default(false)
  authentications UserAuthentication[]
  permissions     UserPermissions?
}

// Represents a login method for a given user
// Linked to a provider, and contains the user's ID for that provider
model UserAuthentication {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId         String
  user           User   @relation(fields: [userId], references: [id])
  provider       String
  // Provider-specific ID for the user (e.g. OIDC sub, username, etc.)
  providerUserId String

  @@id([providerUserId, provider])
}

// Repesents permissions for a given user, if not present, user has no special permissions (superuser implicitly has all permissions)
model UserPermissions {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @id @unique
  user   User   @relation(fields: [userId], references: [id])

  // Permissions flags
  manageMembers     Boolean @default(false)
  manageMemberships Boolean @default(false)
  manageEvents      Boolean @default(false)
  manageClub        Boolean @default(false)
}

// In theory, we can make this multi-club in future, but for now, let's keep it as single-club because the permissions model is built around that
model Club {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id          String  @id @unique @default("club") // single-club for now
  name        String  @unique
  description String?
  logoUrl     String?
  bannerUrl   String?
  clubLinks   ClubLink[]

}

model ClubLink {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id        String @id @default(cuid())
  clubId    String
  club      Club   @relation(fields: [clubId], references: [id])
  name      String
  url       String
  sortOrder Int
}
